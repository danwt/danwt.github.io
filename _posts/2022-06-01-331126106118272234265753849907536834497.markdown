---
layout: post
title:  "A software engineering medley"
date:   2022-06-01T00:00:00+00:00
tags: [sweng]
published: false
---

I highlight interesting software engineering papers that I found in various places. They are lighter reading than technical papers but are nevertheless interesting. I did not choose them based on any criteria, but just my interest. I also included some papers from other fields if it seemed appropriate.

## Large Scale Analysis of Multitasking Behavior During Remote Meetings

Longer meetings and meetings with more people have more multitasking. Morning meetings have more multitasking than afternoon meetings. Indeed, prior work shows that people are more focused in the afternoon. Scheduled meetings have more multitasking than ad hoc meetings. More multitasking occurs Monday-Thursday than on Friday.

## How Work From Home Affects Collaboration (in the pandemic)

Working from home reduces the number of meeting hours and increases the amount of time spent messaging. The number of focused hours is overall greater than when working in an office.

## A Rational Design Process - How and Why to Fake It

There will never be a perfect software development process. Many factors contribute to this. For example, the people who want the software to be built often do not fully understand what they want. Developers may have ulterior motives, for example, being fascinated by a particular technology. The authors argue that despite the impossibility of a perfect process, we should still strive for it. Actionably, we should write good documentation. TODO: read

## The Paradox of the Assisted User: Guidance can be Counterproductive

User interfaces can actually hamper user experience and user performance on cognitive tasks. The authors class interfaces as either internal or external. External interfaces show domain constraints visually, while internal interfaces do not. For example, it is common to grey out buttons for impossible actions. Such an interface would be classified as external. The authors found that a group of users performed better on a Tower of Hanoi game with an internal interface as opposed to an external one, and those users retained more information about the task after an 8 month wait. Additionally, users given a graphical timetabling puzzle did not perform worse with an internal interface than an external one. The users with the external interface actually performed fewer superfluous actions, indicating that they thought more about each action.

## Here we go again: why is it difficult for developers to learn another programming language?

Experienced programmers learn new languages by reading and consuming material alone. They learn what they need and don't worry about advanced language features. Learners try to relate new knowledge to existing knowledge but this can lead to interference; false assumptions are made about the new language.

Language designers and teachers should try to link concepts to existing languages. It is a good idea to explicitly mention the reasons for design choices in the language.

## “A Pace Not Dictated by Electrons”: An Empirical Study of Work Without Email

When studied participants did not use email at work they spent more time on a given window without switching windows. They reported feeling more focused, and enjoying their work more. The participants were less stressed, as measured by heart rate variability.

## Bugs as Deviant Behavior: A General Approach to Inferring Errors in Systems Code

It is common for software requirements to not be specified. This can make it difficult to determine what the code is supposed to do, and therefore difficult to determine what is a bug or not. The authors detect bugs by inferring correct behaviors based on patterns. For example, in the case that 1000 calls to a lock function are followed by an unlock function, but 1 call is not, you might infer that the case without the call to unlock is a bug. Another example is a contradiction implying the presence of a bug. The code

```cpp
if (foo != null){
    foo->bar()
}
```

demonstrates a contradictory belief.

The authors present a tool which detects these instances via template pattern matching and basic stats. They found around 200 bugs in the Linux kernel and OpenBSD, mostly related to null pointers.

## Neurological divide: an fMRI study of prose and code writing

Writing code activates the areas in the brain responsible for top-down planning more than writing prose. Writing prose was also found to activate the left side of the brain more than the right side, while writing code did the opposite. The left side activation is associated with language while the right side is associated with attention, memory and spatial reasoning. The paper concludes that the two tasks are very different from the brains perspective.

## Towards a Theory of Software Developer Job Satisfaction and Perceived Productivity

Developers choose their perceived productivity, job rewards, and who their manager is as most important to their satisfaction, compared to many other factors including autonomy, being free of interruptions and availability of documentation. Additionally, developers choose poor architecture and legacy code as being the most impactful challenges they face, compared to other challenges like poorly defined goals or lack of vision. These findings may be a reflection of most software work taking place on large existing codebases rather than greenfield code.

The most satisfied developers are the ones who feel their work is impactful and that they are an important contributor. Those who enjoyed autonomy and were able to complete tasks felt most productive.

## Empirical analysis of Programming Language Adoption

Programmers tend to choose the language for their project based on the languages they have already used, or language popularity. There is a tendency for programmers to stay within language families, reuse languages they have already used, or choose popular languages.
When choosing a new language, the open source library ecosystem and the ability to extend existing code are the most important factors. Other important factors include team and personal familiarity, performance and portability. Simplicity and commercial libraries are the least important factors. TODO: revisit language feature section

## Links

- [Vivek Haldar's youtube channel](https://www.youtube.com/c/VivekHaldar/videos)
- [Large Scale Analysis of Multitasking Behavior During Remote Meetings](https://arxiv.org/pdf/2101.11865.pdf)
