---
layout: post
title:  "When the interview problem is a bit too interesting"
date:   2023-10-16T00:00:00+00:00
tags: [algorithms]
published: false
---

I recently received an interview problem where I had to code a concurrent Ring Buffer in Go. A ring buffer is a finite sized queue. Adders add elements to the end of the queue, and Poppers pop elements from the front. When an Adder tries to add to a full queue, the oldest element is replaced, and a subsequent Popper should instead get the second oldest element.

For example, you may have a queue state [0,1,2] and capacity 3, with 0 being the next item to pop. If an Adder now adds, the queue state will become [1,2,3], with 1 being the next item to pop. The 0 is thus lost forever.

Applications aside, this is a nice programming exercise. And it's even 'nicer' when you make it concurrent. 

The interview problem was interesting however, because, it wasn't phrased in formal terminologies, like you might find in a [Herlihy definition](https://dl.acm.org/doi/10.5555/1734069), for example. All it said was that the Poppers should be 'blocked' when the queue is empty.

Now, given the fact that the buffer _should_ wrap around, I take this to mean that the Adders should never be blocked by the buffer being full. That is, they should never need to wait for a Popper to pop an element, in order to complete their own operation.

This is interesting when contrasted with the Popper needing to be blocked by the Adders, when the queue is empty!

I think this can be solved quite traditionally, using head and tail pointers, a mutex and a condition variable. However, the interviewer hinted at an elegant solution using Go channels (nevermind that Go channels are implemented with a traditional ring buffer anyway). 

I've though about some kind of channel based solution, but cannot come to anything that simplifies or improves on a traditional pointer and condition variable combo. 

I would be very interested if someone could tell me a solution, as I suspect the interviewer had not themself solved it quite how they thought they had.

## Links

[The Art of Multiprocessor Programming](https://dl.acm.org/doi/10.5555/1734069)
