---
layout: post
title:  "Dive into ZK"
date:   2023-10-16T00:00:00+00:00
tags: [algorithms]
published: false
---

- Completeness: if the prover is correct they'll eventually convince the verifier
- Soundness: the prover can only be convincing if they're correct (with high probability)
- Zero Knowledge: the verifier learns NOTHING about the solution

Circuit: TODO:

Snark:
- Succinct: proof is short (logarithmic in circuit size) and verifiable also in logarithm of circuit size

Circuit setup procedures: TODO:

Example snarks: Groth16, Plonk/Marlin, Bulletproofs, STARK, DARK
How are snarks used:
    CirC to build a dsl for writing snark provable stuff

How does the extractor adversary model work? (Knowledge soundness)

On how basic public key crypto works
    Alice chooses a large number pq, and e relatively prime to (p-1)(q-1)
        (how can she choose e fast?)
    She also chooses d, an inverse of e in the group of order (p-1)(q-1) 
    She makes pq, e, public
    Bob encodes his message M to get ciphertext C = M ^e mod pq
    Alice does C^d mod pq = M^ed mod pq
        Which returns M, because ed mod (p-1)(q-1) is 1
    TODO: understand the relation between pq and (p-1)(q-1) better, something with totient?
        (Eulers theorem§)


How is ZK applied to blockchain?
    'A ZK rollup has a Zero-Knowledge circuit that represents its state machine. Thus, a rollup block producer can submit a ZK-SNARK proof that the submitted app hash is indeed the correct result of applying the included transactions in the block.'
    Source: https://github.com/cosmos/ibc/blob/main/spec/client/Rollup-Integration-guide.md


How do elliptic curves work?
Bilinear groups (KZG)? KZG is not a hiding commitment by default
    Prove f(u)=v, means there is q(X)(X-u)-v=f(x)
    Need to know what an algebraic pairing is
What exactly does it mean to 'open' a commitment?
Trusted setup for the public params?
    Dory (alternative to KZG, but logarithmic) avoids secret randomness in setup, no public params needed

Polynomial IOP
    an interactive process where prover commits to polynomials, and then verifier asks for evaluations at particular points

How to make interactive protocols into non-interactive? Use fiat-shamir transform




# commit reveal

- [TODO name](https://blog.cryptographyengineering.com/2014/11/27/zero-knowledge-proofs-illustrated-primer/)
https://blog.cryptographyengineering.com/2017/01/21/zero-knowledge-proofs-an-illustrated-primer-part-2/

Sokoku example https://manishearth.github.io/blog/2016/08/10/interactive-sudoku-zero-knowledge-proof/
zk blog post for generic execution https://manishearth.github.io/blog/2016/03/05/exploring-zero-knowledge-proofs/

# addendum: cosmos and the zero knowledge landscape

- what are snarks https://crypto.stackexchange.com/questions/19884/what-are-snarks?
- https://forum.celestia.org/t/celestia-snark-accounts-design-spec/1639
- https://sovereign.mirror.xyz/pZl5kAtNIRQiKAjuFvDOQCmFIamGnf0oul3as_DhqGA


# dump

snarktember 2019?

¬¬¬¬¬¬ questions

what is a polynomial iop? (interactive oracle proof)
what is a polynomial commitment?

# links

https://medium.com/@VitalikButerin/quadratic-arithmetic-programs-from-zero-to-hero-f6d558cea649 vitalik 

# the beginnings of a blog

Could work backwards from some example?
The tornado one is not a bad shout