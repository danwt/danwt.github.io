---
layout: post
title:  "Lower bound (space) on FIFO mutual exclusion in shared memory"
date:   2021-12-07T00:00:00+00:00
tags: [shared_memory]
published: true
---

## Algorithm

Mutual exclusion algorithms have four stages and satisfy some conditions. The four stages are the _entry_, _critical section_, _exit_ and _remainder_. The entry acquires the resource, the critical section uses it and the exit releases it. When a process does not care about the resource it is in the remainder. The algorithm must satisfy

- at most one process is in the critical section at a time
- starting from any state where some process is in the entry, some process always enters the critical section eventually
- a process can always perform the exit in a finite number of its own steps only

Additionally, FIFO algorithms have a doorway at the start of the entry. Processes are guaranteed to enter the critical section in the same order that they complete the doorway. A doorway can always be completed by a process in a finite number of its own steps only.

## Result and proof

In an asynchronous shared memory model with no process failures, implementing FIFO mutual exclusion for _n_ processes requires log(n) bits of space. That is, at least n values must be able to be stored, one for each process.

Proof: for contradiction suppose it's possible with fewer than log(_n_) bits. Suppose an adversarial scheduler who schedules processes in round robin order. If Ci denotes a state where Pi has taken steps until it in the entry and has completed its doorway, then by the pigeonhole principle there must exist Cj, with Cj=Ci and i#j. That is, there

Consider an execution _e_ starting from Ci where Pk enters the CS twice. Since Ci=Cj it is possible to execute _e_ from Cj. In this case Pk enters the CS a second time even though Cj has completed its doorway (by adversarial choice). This contradicts FIFO.

## Links

- [Hagit Attiya; Faith Ellen, Impossibility Results for Distributed Computing , Morgan & Claypool, 2014.](https://ieeexplore.ieee.org/document/6855592/)
