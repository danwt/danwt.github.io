---
layout: post
title:  "The CMU Database Class"
date:   2023-10-16T00:00:00+00:00
tags: [algorithms]
published: false
---

¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
ADVANCED COURSE 2024

OLAP

Modern components
- system catalogs
- intermediate repr
- query optimizer
- file format / access libs
- execution engines/ fabrics

Sequential scanning
- data encoding/compression
- prefetching
- parallelization/vectorization
- clustering/sorting
- late materialization
- materialized views/caching
- skipping
- compiling specialized code

- Encodings/formats
    btrblocks
        - try loads of schemes for each column datatype, on 1% sample
          this adds a 2% overhead overrall on data ingestion
        - fast static symbol table
            a hash table without linked buckets: just kick things out
            probabilistically you will end up with frequent elements in there
        - roaring bitmap 
    fastlanes
        - reorder stuff to maximise SIMD benefit 
    bitweaving
        - bit slice (given a list of integers, store a list of first bits, second bits etc)
          do it in a way to get more SIMD
    priscilla
        - used in youtube, expose compressions dictionary to upper level so that predicates can be evaluated more  easily

    similarly, look at lz4, snappy

¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬``

BASICS COURSE FALL 2023

storage
    - why not use the os?
        - it can flush dirty pages at any time (wrong time for transaction processing) 
        - os stalls threads on page fault
        - dbms cannot be aware of virtual memory, which pages are loaded, if using virtual memory 
        - os just too slow, too much contention on scheduling data structures
        - [tlb shootdown](https://stackoverflow.com/questions/3748384/what-is-tlb-shootdown)
        - if you try it you'll be using madvise,mlock,mysnc which is onerous
    - page layouts  
        - tuple oriented storage
            most systems use slotted pages: have an index array at the start of the page growing forward, and store the data at the end of the page growing backwards
            flow (insert): 
                check page directory to find a page with a free slot 
                get the page from disk/memory    
                check slot array for an empty slot and try to fit it in
            flow (update):
                check page directory to fint the page
                get the page from disk/memory    
                use slot array to find offset
                if fit: overwrite
                else: mark deleted, insert somewhere else
            leads to fragmentatino 
            useless io: 1 page for 1 tuple in worst case
        - log structured (original paper was LSM tree) (levelDB,rocksDB are examples)
            store updates to tuples in a growing log
            maintain index -> tuple id to latest log record 
            can eventually compact, store only last item for tuple, can sort for fast lookup
        - index organized
            afaiu this was your typical btree storage
    - various stuff about types
        I wasnt listening very closely here 
        

¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
LINK DUMP
- https://old.reddit.com/r/databasedevelopment/comments/187cp1g/write_throughput_differences_in_btree_vs_lsmtree/

where I'm at
- F2023 #05 