---
layout: post
title:  "On cloud native and stuff"
date:   2022-12-24T00:00:00+00:00
tags: [TODO]
published: false
---


Introductory patterns
    - Monolith to microservices
        - strangler fig
        - parallel run
        - decorating collaborator
    - Decomposing the database
        - The Shared Database 
        - Database View
        - Database wrapping service
        - 


Micoservices patterns book notes:
Unverified claims that are interesting:
    - orgs who deploy to prod multiple times a day have far few outages
    - each service should have its own db

Problem list
    - network latency 
    - reduced availability due to network calls
    - data consistency across services 
    - god classes prevent decomposition 

The transactional outbox pattern
    - When a service needs to associate some business logic with publishing an event, it does the business logic in a DB transaction with storing an event in its own DB. You use a transaction log tailer (like a dynamo stream) to push these onto the bus

Use sagas instead of two-phase commit
    - sagas are eventually consistent
    - parts of sagas that must be atomic must be in the same service
    - orchestration vs choreography sagas
        - orchestration means having one service coordinate a sequence of calls to other services
        - choreography means each service knowing what to do in sequence
        - recommend orchestration for all the but simplest sagas 
    - avoiding isolation problems:
        (lost updates, dirty reads, non repeatable reads) 
        Techniques
            - application level lock (lock)
                just lock data during saga 
                IMO this is mostly bad and chaotic. Book even suggests implementing deadlock detection LOL 
            - design updates to apply in any order (commutative)
            - order steps of saga to minimize business risk (be pessimistic)
            - reread data before overwriting (compare and swap) 
            - log updates (??) 
                The book suggests that a service wait after receiving a command until it receives more commands, then react intelligently to the ordering. It gives an example of a service waiting after recieiving a Cancel command until it receives an Order command, then it can ignore the Order. 
                This is sus IMO, how do you know when to stop waiting?

Business logic section:
    - DDD reminder
        Distinction between Entity and Value: 
        If two Entities have the same data they are still different.
        If two Values have the same data they are interchangeable
    - DDD aggregates
        Aggregates reference other aggregates by primary key only, not by direct object reference. 
        Never update more than 1 aggregate in a transaction
            It seems the primary reason you shouldn't do this is because it will prevent you splitting different aggregate updates into different services, or different steps of a saga 
    I reached chapter 5.3.2




Use a separate domain model for each service 